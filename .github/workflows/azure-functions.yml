name: Deploy Azure Functions

on:
  push:
    branches:
      - main
      - cloud-migration
    paths:
      - 'PokeDataFunc/**'
      - '.github/workflows/azure-functions.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AZURE_FUNCTIONAPP_NAME: 'pokedata-func'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './PokeDataFunc/dist'
  NODE_VERSION: '20.x'

jobs:
  build-and-deploy-staging:
    runs-on: ubuntu-latest
    name: Build and Deploy to Staging
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.9.0

      - name: Setup Node ${{ env.NODE_VERSION }} Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: './PokeDataFunc/pnpm-lock.yaml'

      - name: 'Install dependencies'
        run: pnpm install --frozen-lockfile
        working-directory: ./PokeDataFunc

      - name: 'Build TypeScript to dist directory'
        run: pnpm run build
        working-directory: ./PokeDataFunc

      - name: 'Copy essential files to dist'
        run: |
          cp host.json dist/host.json
          if [ -f "local.settings.json" ]; then
            cp local.settings.json dist/local.settings.json
          fi
        working-directory: ./PokeDataFunc

      - name: 'Create production package.json in dist'
        run: |
          cat > dist/package.json << 'EOF'
          {
            "name": "pokedatafunc",
            "version": "1.0.0",
            "main": "index.js",
            "engines": {
              "node": ">=20.0.0"
            },
            "dependencies": {
              "@azure/cosmos": "^4.3.0",
              "@azure/functions": "^4.7.2",
              "@azure/storage-blob": "^12.27.0",
              "@typespec/ts-http-runtime": "^0.2.2",
              "axios": "^1.9.0",
              "cookie": "^0.6.0",
              "dotenv": "^16.5.0",
              "redis": "^4.7.0"
            }
          }
          EOF
        working-directory: ./PokeDataFunc

      - name: 'Install production dependencies in dist'
        run: |
          cd dist
          npm install --production --silent
        working-directory: ./PokeDataFunc

      - name: 'Verify complete dist package contents'
        run: |
          echo "=== Dist directory contents ==="
          ls -la dist/
          echo "=== Package.json exists ==="
          cat dist/package.json
          echo "=== Host.json exists ==="
          cat dist/host.json
          echo "=== Node_modules exists ==="
          ls -la dist/node_modules/ | head -10
        working-directory: ./PokeDataFunc

      - name: 'Login to Azure'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Deploy to Azure Functions Staging'
        uses: Azure/functions-action@v1
        id: fa-staging
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          slot-name: 'staging'
          package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: build-and-deploy-staging
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 'Login to Azure'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Swap Staging to Production'
        run: |
          az functionapp deployment slot swap \
            --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
            --resource-group pokedata-rg \
            --slot staging \
            --target-slot production
