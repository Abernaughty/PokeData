# CI/CD Pipeline for PokeData Azure Functions
# Implements staging deployment with manual approval for production

name: Azure Function App CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual triggers

env:
  AZURE_FUNCTIONAPP_NAME: 'pokedata-func'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'PokeDataFunc'
  NODE_VERSION: '22.x'
  RESOURCE_GROUP: 'pokedata-rg'

jobs:
  # Build and Test
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: 'üì• Checkout GitHub Action'
        uses: actions/checkout@v4
      
      - name: 'üì¶ Setup pnpm'
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.4
      
      - name: '‚öôÔ∏è Setup Node ${{ env.NODE_VERSION }}'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: 'üì¶ Install dependencies'
        run: |
          cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          pnpm install --frozen-lockfile
      
      - name: 'üî® Build TypeScript'
        run: |
          cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          pnpm run build
      
      - name: 'üß™ Run tests'
        run: |
          cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          pnpm test
      
      - name: 'üì§ Upload artifact for deployment'
        uses: actions/upload-artifact@v4
        with:
          name: function-app
          path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

  # Deploy to Staging Slot (automatic on main branch push)
  deploy-staging:
    name: Deploy to Staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for OIDC authentication
      contents: read   # Required to checkout code
    environment:
      name: staging
      url: https://pokedata-func-staging.azurewebsites.net
    steps:
      - name: 'üì• Download artifact from build job'
        uses: actions/download-artifact@v4
        with:
          name: function-app
          path: .
      
      - name: 'üîê Login to Azure'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_2373F1476CEC447D9D3BE7FB74677C2A }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_006F21A676F04E49964C0606826AE31A }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_4EABEB599BB34C8A8E60471FB3D1EDD3 }}
      
      - name: 'üöÄ Deploy to Staging Slot'
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          slot-name: 'staging'
          package: '.'
      
      - name: '‚è≥ Wait for deployment to stabilize'
        run: sleep 30
      
      - name: 'üè• Health Check on Staging'
        run: |
          echo "Testing staging deployment..."
          response=$(curl -s -o /dev/null -w "%{http_code}" https://pokedata-func-staging.azurewebsites.net/api/GetSetList)
          if [ $response -eq 200 ]; then
            echo "‚úÖ Staging health check passed! (HTTP $response)"
          else
            echo "‚ö†Ô∏è Staging health check returned HTTP $response"
            echo "The deployment may still be warming up. Check manually before swapping."
          fi
      
      - name: 'üìä Staging Deployment Summary'
        run: |
          echo "========================================="
          echo "Staging deployment complete!"
          echo "========================================="
          echo "Test your staging deployment at:"
          echo "üîó https://pokedata-func-staging.azurewebsites.net/api/GetSetList"
          echo "üîó https://pokedata-func-staging.azurewebsites.net/api/GetCardsBySet?setCode=sv8pt5"
          echo "üîó https://pokedata-func-staging.azurewebsites.net/api/GetCardInfo?cardId=sv8pt5-161"
          echo ""
          echo "Once verified, approve the production deployment to swap slots."

  # Swap to Production (requires manual approval)
  swap-to-production:
    name: Swap to Production
    if: github.ref == 'refs/heads/main'
    needs: deploy-staging
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for OIDC authentication
      contents: read   # Required to checkout code
    environment: 
      name: production
      url: https://pokedata-func.azurewebsites.net
    steps:
      - name: 'üîê Login to Azure'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_2373F1476CEC447D9D3BE7FB74677C2A }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_006F21A676F04E49964C0606826AE31A }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_4EABEB599BB34C8A8E60471FB3D1EDD3 }}
      
      - name: 'üîÑ Swap Staging to Production'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Performing slot swap..."
            az functionapp deployment slot swap \
              --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --slot staging \
              --target-slot production
      
      - name: '‚è≥ Wait for swap to complete'
        run: sleep 15
      
      - name: 'üè• Verify Production Health'
        run: |
          echo "Testing production deployment..."
          response=$(curl -s -o /dev/null -w "%{http_code}" https://pokedata-func.azurewebsites.net/api/GetSetList)
          if [ $response -eq 200 ]; then
            echo "‚úÖ Production health check passed! (HTTP $response)"
          else
            echo "‚ö†Ô∏è Production health check returned HTTP $response"
            echo "The swap completed but the app may need time to warm up."
          fi
      
      - name: 'üî• Warm up Production Endpoints'
        run: |
          echo "Warming up production endpoints..."
          curl -s https://pokedata-func.azurewebsites.net/api/GetSetList > /dev/null
          curl -s "https://pokedata-func.azurewebsites.net/api/GetCardsBySet?setCode=sv8pt5" > /dev/null
          echo "Production endpoints warmed up"
      
      - name: 'üéâ Production Deployment Summary'
        run: |
          echo "========================================="
          echo "Production deployment complete!"
          echo "========================================="
          echo "‚úÖ Your code is now live in production!"
          echo "üîó Production URL: https://pokedata-func.azurewebsites.net"
          echo ""
          echo "‚ÑπÔ∏è The previous production version is now in the staging slot."
          echo "‚ÑπÔ∏è If you need to rollback, swap the slots again."

  # PR validation (build and test only, no deployment)
  pr-validation:
    name: PR Validation
    if: github.event_name == 'pull_request'
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: '‚úÖ PR Validation Complete'
        run: |
          echo "Pull request validation successful!"
          echo "Build and tests passed. Ready for review."
